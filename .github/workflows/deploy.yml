name: Deploy to Server

on:
  push:
    branches:
      - main  # main 브랜치에 push할 때 자동 배포
  workflow_dispatch:  # 수동 실행도 가능

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment archive
        run: |
          tar -czf lecture_dashboard.tar.gz \
            --exclude='venv' \
            --exclude='.git' \
            --exclude='__pycache__' \
            --exclude='.idea' \
            --exclude='.claude' \
            --exclude='*.pyc' \
            --exclude='.env.local' \
            --exclude='deploy.sh' \
            --exclude='deploy-docker.sh' \
            --exclude='server-config.sh' \
            backend/ frontend/ .env.example .env.dev Dockerfile docker-compose.yml .dockerignore

      - name: Upload to server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} \
            lecture_dashboard.tar.gz \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:~/

      - name: Deploy with Docker on server
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} \
            ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'ENDSSH'
            set -e

            # 배포 디렉토리 생성
            mkdir -p ~/lecture_dashboard
            cd ~/lecture_dashboard

            # 압축 해제
            tar -xzf ~/lecture_dashboard.tar.gz
            rm ~/lecture_dashboard.tar.gz

            # Docker 설치 확인
            if ! command -v docker &> /dev/null; then
              echo "❌ Docker가 설치되어 있지 않습니다."
              exit 1
            fi

            # 기존 컨테이너 중지 및 제거
            echo "🔄 기존 컨테이너 중지 중..."
            docker compose down 2>/dev/null || docker-compose down 2>/dev/null || true

            # Docker 이미지 빌드 및 컨테이너 시작
            echo "🐳 Docker 이미지 빌드 및 컨테이너 시작 중..."
            if command -v docker-compose &> /dev/null; then
              docker-compose up -d --build
            else
              docker compose up -d --build
            fi

            # 컨테이너 상태 확인
            echo "📊 컨테이너 상태:"
            docker ps | grep lecture_dashboard || echo "컨테이너를 찾을 수 없습니다"

            echo "✅ 배포 완료!"
          ENDSSH

      - name: Verify deployment
        run: |
          echo "🌐 배포 완료: http://${{ secrets.SERVER_HOST }}:8000"
          echo "📝 로그 확인: ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} 'docker logs -f lecture_dashboard'"
